@using MudBlazor
@using Xyaneon.Bioinformatics.FASTA.IO
@using System.Diagnostics
@using System.Runtime.CompilerServices
@using Blazorise.Charts
@using ShannonEntropyCal
@using Color = MudBlazor.Color
@using System.ComponentModel
@using System.ComponentModel.Design
@using Bio
@using Bio.Algorithms.Alignment
@using Bio.Algorithms.SuffixTree
@using Bio.Extensions
@using Blazorise.Extensions
@using MudBlazor.Utilities
@using Newtonsoft.Json
@using Sequence = Xyaneon.Bioinformatics.FASTA.Sequence
@inject IJSRuntime JS
@inject ISnackbar Snackbar


@page "/cmi"
<PageTitle>Shannon - Conditional Mutal Information</PageTitle>
<MudSnackbarProvider/>
<MudContainer>
    @if (_isLoading)
    {
        <p>Loading...</p>
    }

    <FastaLoaderComponent Title="1.Upload first sequence" @bind-DataLoaded="_firstDataLoaded" @bind-FastaReader="_fastaReaderFirstSeq"/>
    <FastaLoaderComponent Title="2.Upload second sequence" @bind-DataLoaded="_secondDataLoaded" @bind-FastaReader="_fastaReaderSecondSeq" />
    <FastaLoaderComponent Title="3.Upload third sequence" @bind-DataLoaded="_thirdDataLoaded" @bind-FastaReader="_fastaReaderThirdSeq" />
    <br/>
    @if (_firstDataLoaded && _secondDataLoaded && _thirdDataLoaded)
{
    <MudGrid Spacing="@_gridSpacing" Justify="Justify.Center">
        <MudItem>
            <ListOfUploadedSequences Title="List of sequences from first file" @bind-FastaReader="_fastaReaderFirstSeq" @bind-SelectedSequence="_choosenFirstSequence"></ListOfUploadedSequences>
        </MudItem>
        <MudItem>
            <ListOfUploadedSequences Title="List of sequences from second file" @bind-FastaReader="_fastaReaderSecondSeq" @bind-SelectedSequence="_choosenSecondSequence"></ListOfUploadedSequences>
        </MudItem>
        <MudItem>
            <ListOfUploadedSequences Title="List of sequences from third file" @bind-FastaReader="_fastaReaderThirdSeq" @bind-SelectedSequence="_choosenThirdSequence"></ListOfUploadedSequences>
        </MudItem>
        <MudItem>
                @if (_choosenSecondSequence == "" || _choosenFirstSequence == "" || _choosenThirdSequence == "")
                {
              
                <MudButton Disabled="true"   Style="position: relative; top: 50%;" Variant="Variant.Filled"
                           Color="Color.Primary"> Sequences are already aligned</MudButton>
                 }
                else
                {
                   
                    <MudButton OnClick="SequencesAreReady" Style="position: relative; top: 50%;" Variant="Variant.Filled"
                               Color="Color.Primary"> Sequences are already aligned</MudButton>
                }

        </MudItem>
    </MudGrid>
    <MudGrid Spacing="@_gridSpacing" Justify="Justify.Center">
        <MudItem>
        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudText Typo="Typo.h3">3. Choose properties:</MudText>
            <MudTextField @bind-Value="_subsequenceLength" Label="Calculated subsequence" Variant="Variant.Text"></MudTextField>
            <MudButton Variant="Variant.Filled" OnClick="@ChangeSubsequence" Color="Color.Primary">Change subsequence</MudButton>

            <MudButton OnClick="AddOrRemoveFromChart" Style="position: relative; top: 50%;" Variant="Variant.Filled"
                       Color="Color.Primary"> Calculate Conditional Mutual Information</MudButton>
        </MudPaper>
       

        </MudItem>

       
    </MudGrid>
}
   
</MudContainer>
@if (PlotShow)
{
    <div id="LineChart"></div>
}
@code {
    public bool PlotShow { get; set; } = true;
    private bool _firstSeqCheckBox { get; set; } = false;
    private bool  _secondSeqCheckBox{ get; set; } = false;
    private string _firstSeqHeader = "";
    private string _secondSeqHeader = "";
    private bool _isLoading = false;
    private bool _firstDataLoaded = false;
    private bool _secondDataLoaded = false;
    private bool _thirdDataLoaded = false;
    private int _gridSpacing = 10;
    private int _subsequenceLength = 18;
    private FastaReader _fastaReaderFirstSeq = new FastaReader();
    private FastaReader _fastaReaderSecondSeq = new FastaReader();
    private FastaReader _fastaReaderThirdSeq = new FastaReader();
    private string _choosenFirstSequence="";
    private string _choosenSecondSequence="";
    private string _choosenThirdSequence="";
    private string _emptyString;
    private string _alignedFirstSequence="";
    private string _alignedSecondtSequence="";
    private string _alignedThirdSequence="";
    private List<double> _mutualInformationResult= new List<double>();
    List<EntropyControl.ChartData> lineChart = new List<EntropyControl.ChartData>();
    private EntropyControl.CurrentSequencesOnChart _chartSeqence = new EntropyControl.CurrentSequencesOnChart();
  
    private async Task ChangeSubsequence()
    {
        await AddOrRemoveFromChart();
        await Task.Run(HandleRedraw);
    }
    public async Task ShowMessage(string message)
    {
        Snackbar.Add(message);
    }
    public async Task OnAlignStarted()
    {
        await ShowMessage("Starting alignment...");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }
    private async Task SequencesAreReady()
    {
        var sequenceFirst= _fastaReaderFirstSeq.Sequences.SingleOrDefault(x => x.Header.ToString() == _choosenFirstSequence);
        string seqString = sequenceFirst.Data.ToMultilineString().Replace("\n","");

        var sequenceSecond= _fastaReaderSecondSeq.Sequences.SingleOrDefault(x => x.Header.ToString() == _choosenSecondSequence);
        string seqSecondString = sequenceSecond.Data.ToMultilineString().Replace("\n","");

        var sequenceThird= _fastaReaderThirdSeq.Sequences.SingleOrDefault(x => x.Header.ToString() == _choosenThirdSequence);
        string seqThirdString = sequenceThird.Data.ToMultilineString().Replace("\n","");

        if (seqString.Length != seqSecondString.Length || seqString.Length!= seqThirdString.Length || seqSecondString.Length!= seqThirdString.Length)
        {
            await ShowMessage("Sequences have diffrent length, alignment can be wrong!");
        }
       
        _alignedFirstSequence = seqString;
        _alignedSecondtSequence = seqSecondString;
        _alignedThirdSequence = seqThirdString;
    }
   
    private async Task AddOrRemoveFromChart()
    {
        await Task.Run(()=>ShowMessage("Starting calculations..."));
      
        var seq = CalculateConditionalMutualInformation().Result;
        _chartSeqence = new EntropyControl.CurrentSequencesOnChart() { name = seq.Name, seq = seq };
        await Task.Run(HandleRedraw);
    }
    public List<double> GetEntropyScoreList(SequenceEntropy seqentEntropy)
    {

        List<double> retList = new List<double>();
        foreach (var sc in seqentEntropy.Score)
        {
            retList.Add(sc);
        }
        return retList;
    }
    async Task HandleRedraw()
    {

        lineChart.Clear();
       
            var list = GetEntropyScoreList(_chartSeqence.seq);
            List<double> yAxis = new List<double>();
            int tmp = 0;
            foreach (var counter in list)
            {
                yAxis.Add(tmp);
                tmp++;
            }

            EntropyControl.ChartData chartData = new EntropyControl.ChartData()
            {
                x = yAxis.ToArray(),
                y = list.ToArray(),
                mode = "scatter",
                name = _chartSeqence.name
            };
            lineChart.Add(chartData);
        
        string json = JsonConvert.SerializeObject(lineChart);
        string xaxisname = "Number of starting subsequence position in sequence (Subsequence length:" + _subsequenceLength + ")";
        await JS.InvokeVoidAsync("test", json, xaxisname, "Conditional Mutual Information value");


        _isLoading = false;
        StateHasChanged();

    }
    private async Task<SequenceEntropy> CalculateConditionalMutualInformation()
    {
        MutualConditionalInformationCal cal = new MutualConditionalInformationCal();
        _mutualInformationResult = new List<double>();
        for (int index=0; (index+_subsequenceLength-1)<_alignedFirstSequence.Length;index++)
        {
            _mutualInformationResult.Add(cal.MutualConditionaInformationMoreDetailed(_alignedFirstSequence.Substring(index, _subsequenceLength), _alignedSecondtSequence.Substring(index, _subsequenceLength), _alignedSecondtSequence.Substring(index,_subsequenceLength)));
        }
        SequenceEntropy seq = new SequenceEntropy()
        {
            Name = "Mutual information for: " + _choosenFirstSequence + "and" + _choosenSecondSequence,
            Score = _mutualInformationResult
        };
        await ShowMessage("Calculations finished!");
        return seq;
    }

}
