@using MudBlazor
@using Xyaneon.Bioinformatics.FASTA
@using Xyaneon.Bioinformatics.FASTA.IO
@using ShannonEntropyCal
@page "/entropy"
<h3>EntropyControl</h3>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnLoadFiles" > LoadFiles</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnShow" > Show Loading result</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="OnCalculate" > Calculate</MudButton>


    <p>Sequences:</p>
    @foreach (var sequence in _fastaReader.Sequences)
    {
        @if (_show)
        {
            @foreach (var headeritem in sequence.Header.Items)
            {
                <p> @headeritem.ToString()</p>

            }
        
        }
    }    
@if (_show)
{
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="_index" XAxisLabels="@XAxisLabels" Width="100%" Height="100%"></MudChart>
}
@code {

    private int _index = -1; //default value cannot be 0 -> first selectedindex is 0.
    private FastaReader _fastaReader = new FastaReader();
    private int _subsequenceLength = 18;
    private bool _show = false;
    public string[] XAxisLabels = new string[]{};
    public List<ChartSeries> Series = new List<ChartSeries>();

    private void OnCalculate()
    {
        foreach (var sequence in _fastaReader.Sequences)
        {
            string seq = sequence.Data.ToMultilineString();
            EntropyCal ent = new EntropyCal();
            SequenceEntropy seqentEntropy = new SequenceEntropy();

            for (int index = 0; index < seq.Length; index++)
            {
                if ((_subsequenceLength + index) < seq.Length)
                {
                    var substr = seq.Substring(index, _subsequenceLength);

                    seqentEntropy.Score.Add(ent.EntropyValue(substr));
                }
            }
            _fastaReader.EntropySequences.Add(seqentEntropy);
        }


        foreach (var sequence in _fastaReader.Sequences)
        {
            foreach (var headeritem in sequence.Header.Items)
            {
                Series.Add(new ChartSeries(){Name =   headeritem.ToString()});
            }
        }
        foreach (var chart in Series)
        {
            foreach (var seq in _fastaReader.EntropySequences)
            {
                chart.Data = seq.Score.ToArray();
            }
        }
        List<string> tmp =new List<string>();
        for (int i = 0; i < _fastaReader.EntropySequences[0].Score.Count; i++)
        {
           
            tmp.Add(i.ToString());
           
        }
        XAxisLabels = tmp.ToArray();
        _show = true;
        StateHasChanged();
    }
        private void OnShow()
    {
        if (_show)
        {
            _show = false;
        }
        else
        {
            _show = true;
        }
    }
    private void OnLoadFiles()
    {
        _fastaReader.ReadFile("Alingments/sequence.fasta");
        StateHasChanged();
    }
}
