@using MudBlazor
@using Xyaneon.Bioinformatics.FASTA
@using Xyaneon.Bioinformatics.FASTA.IO
@using System.Diagnostics
@using System.Runtime.CompilerServices
@using Blazorise.Charts
@using ShannonEntropyCal
@using Color = MudBlazor.Color
@using System.ComponentModel
@using System.ComponentModel.Design
@using MudBlazor.Utilities
@using Newtonsoft.Json
@inject IJSRuntime JS
@inject ISnackbar Snackbar


@page "/mi"

<MudSnackbarProvider/>
<MudContainer>
    @if (_isLoading)
    {
        <p>Loading...</p>
    }
    <FastaLoaderComponent Title="1.Upload first sequence" @bind-DataLoaded="_firstDataLoaded" @bind-FastaReader="_fastaReaderFirstSeq"/>
    <FastaLoaderComponent Title="2.Upload second sequence" @bind-DataLoaded="_secondDataLoaded" @bind-FastaReader="_fastaReaderSecondSeq" />
    <br/>
@if (_firstDataLoaded && _secondDataLoaded)
{
    <MudGrid Spacing="@_gridSpacing" Justify="Justify.Center">
        <MudItem>
                <MudList Style="max-width: 150px; box-shadow: -3px 8px 31px -20px rgba(6, 6, 6, 1); " Clickable="true">
                    <MudListSubheader>
                        List of sequences from first file
                    </MudListSubheader>
            @foreach (var seq in _fastaReaderFirstSeq.Sequences)
            {
                <div style="border-top: 2px solid rgba(6, 6, 6, 1);"></div>
                @if (_choosenFirstSequence == seq.Header.ToString())
                {
                    <MudListItem Text="@seq.Header.ToString()" Icon="@Icons.Filled.Done" IconColor="Color.Success" OnClick="() => _choosenFirstSequence = _emptyString"/>
                }
                else
                {
                    <MudListItem Text="@seq.Header.ToString()" OnClick="() => _choosenFirstSequence = seq.Header.ToString()"/>
                }
              
            }
                  
           
        </MudList>
        </MudItem>
        <MudItem>
           
            <MudButton Style="position: relative;
                              top: 50%;" Variant="Variant.Filled"
                       Color="Color.Primary"> Align sequences</MudButton>
        </MudItem>
        <MudItem>

                <MudList Style="max-width: 150px; box-shadow: -3px 8px 31px -20px rgba(6, 6, 6, 1); " Clickable="true">
            <MudListSubheader>
                List of sequences from second file
            </MudListSubheader>
            @foreach (var seq in _fastaReaderSecondSeq.Sequences)
            {
                <div style="border-top: 2px solid rgba(6, 6, 6, 1);"></div>
                @if (_choosenSecondSequence == seq.Header.ToString())
                {
                    <MudListItem Text="@seq.Header.ToString()" Icon="@Icons.Filled.Done" IconColor="Color.Success" OnClick="() => _choosenSecondSequence = _emptyString"/>
                }
                else
                {
                    <MudListItem Text="@seq.Header.ToString()" OnClick="() => _choosenSecondSequence = seq.Header.ToString()"/>
                }
              
                
            }

        </MudList>
        </MudItem>
    </MudGrid>
}
    @*
    <MudStack>
        @if (_firstDataLoaded)
        {
            @foreach (var seq in _fastaReaderFirstSeq.Sequences)
            {
                <MudPaper Class="pa-4 mr-16"> @seq.Header.ToString()

                    <MudButtonGroup Color="Color.Primary" Variant="Variant.Text">

                        @if (_firstSeqHeader == seq.Header.ToString())
                        {
                            <MudButton Size="Size.Small" OnClick="@OnUnMarkSeqAsFirstToCompare">Unmark first sequence
                            </MudButton>
                        }
                        @if (_secondSeqHeader == seq.Header.ToString())
                        {
                            <MudButton Size="Size.Small" OnClick="@OnUnMarkSeqAsSecondToCompare">Unmark second sequence
                            </MudButton>
                        }
                        @if (_firstSeqHeader == "")
                        {
                            <MudButton Size="Size.Small" OnClick="@(() => OnMarkSeqAsFirstToCompare(seq.Header.ToString()))">Mark as first
                            </MudButton>
                        }
                        @if (_secondSeqHeader == "")
                        {
                            <MudButton Size="Size.Small" OnClick="@(() => OnMarkSeqAsSecondToCompare(seq.Header.ToString()))">Mark as second
                            </MudButton>
                        }
                    </MudButtonGroup>
                </MudPaper>

            }
        }
        
    </MudStack>
    @if(_firstSeqCheckBox && _secondSeqCheckBox)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@CalculateSequences"> Calculate</MudButton>
  
        }
    *@

</MudContainer>
@code {
    private bool _firstSeqCheckBox { get; set; } = false;
    private bool  _secondSeqCheckBox{ get; set; } = false;
    private string _firstSeqHeader = "";
    private string _secondSeqHeader = "";
    private bool _isLoading = false;
    private bool _firstDataLoaded = false;
    private bool _secondDataLoaded = false;
    private int _gridSpacing = 10;
    private FastaReader _fastaReaderFirstSeq = new FastaReader();
    private FastaReader _fastaReaderSecondSeq = new FastaReader();
    private string _choosenFirstSequence;
    private string _choosenSecondSequence;
    private string _emptyString;
    private string _colorStringPrimary = "background-color:"+Color.Primary.ToString()+";";
    

    public async Task Calculate()
    {
        
    }
    public async Task OnUnMarkSeqAsSecondToCompare()
    {
       _secondSeqCheckBox = false;
        _secondSeqHeader = "";   
    }
    public async Task OnUnMarkSeqAsFirstToCompare()
    {
            _firstSeqCheckBox = false;
        _firstSeqHeader = "";
    }
    public async Task OnMarkSeqAsFirstToCompare(string header)
    {
        _firstSeqCheckBox = true;
        _firstSeqHeader = header;
    }
    public async Task OnMarkSeqAsSecondToCompare(string header)
    {
        _secondSeqCheckBox = true;
        _secondSeqHeader = header;
    }
   

       
   
}
