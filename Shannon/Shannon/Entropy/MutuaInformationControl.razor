@using MudBlazor
@using Xyaneon.Bioinformatics.FASTA.IO
@using System.Diagnostics
@using System.Runtime.CompilerServices
@using Blazorise.Charts
@using ShannonEntropyCal
@using Color = MudBlazor.Color
@using System.ComponentModel
@using System.ComponentModel.Design
@using Bio
@using Bio.Algorithms.Alignment
@using Bio.Algorithms.SuffixTree
@using MudBlazor.Utilities
@using Newtonsoft.Json
@using Sequence = Xyaneon.Bioinformatics.FASTA.Sequence
@inject IJSRuntime JS
@inject ISnackbar Snackbar


@page "/mi"

<MudSnackbarProvider/>
<MudContainer>
    @if (_isLoading)
    {
        <p>Loading...</p>
    }
    <FastaLoaderComponent Title="1.Upload first sequence" @bind-DataLoaded="_firstDataLoaded" @bind-FastaReader="_fastaReaderFirstSeq"/>
    <FastaLoaderComponent Title="2.Upload second sequence" @bind-DataLoaded="_secondDataLoaded" @bind-FastaReader="_fastaReaderSecondSeq" />
    <br/>
@if (_firstDataLoaded && _secondDataLoaded)
{
    <MudGrid Spacing="@_gridSpacing" Justify="Justify.Center">
        <MudItem>
            <ListOfUploadedSequences Title="List of sequences from first file" @bind-FastaReader="_fastaReaderFirstSeq" @bind-SelectedSequence="_choosenFirstSequence"></ListOfUploadedSequences>
        </MudItem>
        <MudItem>
            <MudButton OnClick="AlignSequences" Style="position: relative;
                              top: 50%;" Variant="Variant.Filled"
                       Color="Color.Primary"> Align sequences</MudButton>
        </MudItem>
        <MudItem>
            <ListOfUploadedSequences Title="List of sequences from second file" @bind-FastaReader="_fastaReaderSecondSeq" @bind-SelectedSequence="_choosenSecondSequence"></ListOfUploadedSequences>
        </MudItem>
    </MudGrid>
}
</MudContainer>
@_flag
@code {
    private bool _firstSeqCheckBox { get; set; } = false;
    private bool  _secondSeqCheckBox{ get; set; } = false;
    private string _firstSeqHeader = "";
    private string _secondSeqHeader = "";
    private bool _isLoading = false;
    private bool _firstDataLoaded = false;
    private bool _secondDataLoaded = false;
    private int _gridSpacing = 10;
    private FastaReader _fastaReaderFirstSeq = new FastaReader();
    private FastaReader _fastaReaderSecondSeq = new FastaReader();
    private string _choosenFirstSequence;
    private string _choosenSecondSequence;
    private string _emptyString;
    private string _colorStringPrimary = "background-color:"+Color.Primary.ToString()+";";
    private bool _flag = false;

    public async Task Calculate()
    {
        
    }
    public async Task OnUnMarkSeqAsSecondToCompare()
    {
       _secondSeqCheckBox = false;
        _secondSeqHeader = "";   
    }
    public async Task OnUnMarkSeqAsFirstToCompare()
    {
            _firstSeqCheckBox = false;
        _firstSeqHeader = "";
    }
    public async Task OnMarkSeqAsFirstToCompare(string header)
    {
        _firstSeqCheckBox = true;
        _firstSeqHeader = header;
    }
    public async Task OnMarkSeqAsSecondToCompare(string header)
    {
        _secondSeqCheckBox = true;
        _secondSeqHeader = header;
    }


    private async Task AlignSequences()
    {
       var sequenceFirst= _fastaReaderFirstSeq.Sequences.SingleOrDefault(x => x.Header.ToString() == _choosenFirstSequence);
        string seqString = sequenceFirst.Data.ToMultilineString().Replace("\n","");
      
        Bio.Sequence seq = new Bio.Sequence( DnaAlphabet.Instance,seqString);

        var sequenceSecond= _fastaReaderFirstSeq.Sequences.SingleOrDefault(x => x.Header.ToString() == _choosenFirstSequence);
        string seqSecondString = sequenceSecond.Data.ToMultilineString().Replace("\n","");;
      
        Bio.Sequence seq1 = new Bio.Sequence( DnaAlphabet.Instance, seqSecondString);

        //var na = new NeedlemanWunschAligner();
       // var algorithm = new NUCmer( new MultiWaySuffixTree(seq));
       var alt= new Bio.Algorithms.Alignment.NucmerPairwiseAligner();
        var result=alt.Align(new List<ISequence>(){seq,seq1});
       // var result =  na.Align(seq, seq1);

        _flag = true;
    // foreach (var res in result.First().PairwiseAlignedSequences)
    // {
    //     res.SecondSequence.Should().BeEquivalentTo(new Sequence(DnaAlphabet.Instance, "ATT----"));
    // }
    }  //

}
