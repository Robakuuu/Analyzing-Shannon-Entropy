@page "/test"
@using Newtonsoft.Json
@using Formatting = System.Xml.Formatting
@using MudBlazor
@using System.Xml.Linq
@using System.Xml
@using System.Diagnostics.Metrics

<MudButton Variant="Variant.Filled"
           Color="Color.Primary" OnClick="@Fetch">
    Fetch
</MudButton>
<MudButton Variant="Variant.Filled"
           Color="Color.Primary" OnClick="@Parse">
    Parse
</MudButton>
<MudButton Variant="Variant.Filled"
           Color="Color.Primary" OnClick="@Get">
    Get
</MudButton>
@code {

    //"https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=ON513886.1&rettype=gb&retmode=text"
    public class Ncbi
    {
        public Ncbi()
        {

        }
        public async Task<string> FetchURL(string url)
        {
            HttpClient httpClient = new HttpClient();
            string response = await httpClient.GetStringAsync(new Uri(url));
            return response;
        }
    }

    private string _response = "";
    private Ncbi _fetcher = new Ncbi();
    XDocument _doc = new XDocument();
    public List<INSDSet> Sets = new List<INSDSet>();

    public async Task Parse()
    {
        // string tmp = _response.Replace("\n", "");
        _doc = XDocument.Parse(_response);
    }

    public class INSDQualifier
    {
        public string Name;
        public string Value;
    }
    public class INSDInterval
    {
        public string From;
        public string To;
    }
    public class INSDFeatures
    {
        public string INSDFeatureKey;
        public string INSDFeatureLocation;
        public List<INSDInterval> Intervals = new List<INSDInterval>();
        public List<INSDQualifier> Qualifiers = new List<INSDQualifier>();
    }
    public class INSDSet
    {
        public string AccesionID = "";
        public List<INSDFeatures> Features = new List<INSDFeatures>();

    
    }
    public async Task Get()
    {
        var nodes = _doc.Elements();
        INSDFeatures newFeatures = new INSDFeatures();
        INSDInterval newInterval = new INSDInterval();
        INSDQualifier newQualifier = new INSDQualifier();
        INSDSet newSet = new INSDSet();
        foreach (var insdset in nodes)
        {
            foreach (var insdseq in insdset.Elements())
            {
                foreach (var child in insdseq.Elements())
                {
                    if (child.Name == "INSDSeq_accession-version")
                    {
                        newSet.AccesionID = child.Value;
                      
                      
                    }
                    if (child.Name == "INSDSeq_feature-table")
                    {
                        foreach (var feauters in child.Elements())
                        {
                            foreach (var feauter in feauters.Elements())
                            {
                                
                                if (feauter.Name == "INSDFeature_key")
                                {
                                    newFeatures.INSDFeatureKey = feauter.Value;
                                }
                                if (feauter.Name == "INSDFeature_location")
                                {
                                    newFeatures.INSDFeatureLocation = feauter.Value;
                                }
                                if (feauter.Name == "INSDFeature_intervals")
                                {
                                    foreach (var interval in feauter.Elements())
                                    {
                                        foreach (var childinterval in interval.Elements())
                                        {
                                            if (childinterval.Name == "INSDInterval_from")
                                            {
                                                newInterval.From = childinterval.Value;
                                            }
                                            if (childinterval.Name == "INSDInterval_to")
                                            {
                                                newInterval.To = childinterval.Value;
                                                newFeatures.Intervals.Add(newInterval);
                                            }
                                        }
                                    }

                                }
                                if (feauter.Name == "INSDFeature_quals")
                                {
                                    foreach (var quals in feauter.Elements())
                                    {
                                        foreach (var childqual in quals.Elements())
                                        {
                                            if (childqual.Name == "INSDQualifier_name")
                                            {
                                                newQualifier.Name = childqual.Value;
                                            }
                                            if (childqual.Name == "INSDQualifier_value")
                                            {
                                                newQualifier.Value = childqual.Value;
                                                newFeatures.Qualifiers.Add(newQualifier);
                                            }
                                        }
                                    }
                                    }
                            }
                            newSet.Features.Add(newFeatures);
                            newFeatures = new INSDFeatures();
                        }
                      
                    }


                }

               
            }
            Sets.Add(newSet);
        }
    }
    public async Task Fetch()
    {
        _response = await _fetcher.FetchURL("https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=ON513886.1&rettype=gbc&retmode=xml");
    }

}